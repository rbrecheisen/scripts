#!/usr/bin/env python

import sys
import subprocess


# --------------------------------------------------------------------------------------------------------------------
def get_image_ids():
    result = subprocess.check_output(['docker', 'images', '-q'])
    result = result.split('\n')
    ids = []
    for id in result:
        if id != '':
            tag = subprocess.check_output(['docker', 'inspect', '-f', '"{{.RepoTags}}"', '{}'.format(id)])
            tag = tag.strip()[2:-2]
            if not tag.startswith('gcr.io') and not tag.startswith('redis'):
                ids.append(id)
    return ids


# --------------------------------------------------------------------------------------------------------------------
def get_container_ids(flag='-q'):
    result = subprocess.check_output(['docker', 'ps', flag])
    result = result.split('\n')
    ids = []
    for id in result:
        if id != '':
            name = subprocess.check_output(['docker', 'inspect', '-f', '"{{.Name}}"', '{}'.format(id)])
            name = name.strip()[2:-2]
            if not name.startswith('k8s'):
                ids.append(id)
    return ids


# --------------------------------------------------------------------------------------------------------------------
def get_container_names():
    container_ids = get_running_container_ids()
    names = []
    for id in container_ids:
        name = subprocess.check_output(['docker', 'inspect', '-f', '"{{.Name}}"', '{}'.format(id)])
        name = name.strip()[2:-2]
        names.append(name)
    return names


# --------------------------------------------------------------------------------------------------------------------
def get_running_container_ids():
    return get_container_ids()


# --------------------------------------------------------------------------------------------------------------------
def get_all_container_ids():
    return get_container_ids(flag='-aq')


# --------------------------------------------------------------------------------------------------------------------
def get_stopped_container_ids():
    ids_running = get_running_container_ids()
    ids_all = get_all_container_ids()
    ids = []
    for id in ids_all:
        if id not in ids_running:
            ids.append(id)
    return ids


# --------------------------------------------------------------------------------------------------------------------
def get_dangling_volume_ids():
    result = subprocess.check_output(['docker', 'volume', 'ls', '-qf', 'dangling=true'])
    result = result.split('\n')
    ids = []
    for id in result:
        if id != '':
            ids.append(id)
    return ids


# --------------------------------------------------------------------------------------------------------------------
def clean():
    container_ids = get_running_container_ids()
    for id in container_ids:
        subprocess.call(['docker', 'stop', '{}'.format(id)])
    container_ids = get_stopped_container_ids()
    for id in container_ids:
        subprocess.call(['docker', 'rm', '-f', '{}'.format(id)])
    image_ids = get_image_ids()
    for id in image_ids:
        subprocess.call(['docker', 'rmi', '-f', '{}'.format(id)])
    clean_volumes()


# --------------------------------------------------------------------------------------------------------------------
def clean_volumes():
    # docker volume rm $(docker volume ls -qf dangling=true)
    volume_ids = get_dangling_volume_ids()
    for id in volume_ids:
        subprocess.call(['docker', 'volume', 'rm', '{}'.format(id)])


# --------------------------------------------------------------------------------------------------------------------
def images():
    print(subprocess.check_output(['docker', 'images']))


# --------------------------------------------------------------------------------------------------------------------
def up():
    subprocess.call(['docker-compose', 'down'])
    subprocess.call(['docker-compose', 'up', '-d'])
    print(subprocess.check_output(['docker-compose', 'ps']))


# --------------------------------------------------------------------------------------------------------------------
def down():
    subprocess.call(['docker-compose', 'down'])
    print(subprocess.check_output(['docker-compose', 'ps']))


# --------------------------------------------------------------------------------------------------------------------
def bash(name):
    container_name = ''
    for n in get_container_names():
        if name == n or name in n:
            container_name = n
    subprocess.call(['docker', 'exec', '-it', '{}'.format(container_name), 'bash'])


# --------------------------------------------------------------------------------------------------------------------
def show_help():
    print('Usage: dc <option> [<params>]')
    print('')
    print('Options:')
    print('')
    print('clean         Removes all images and containers (except Kubernetes related)')
    print('clean-volumes Removes all data volumes (including dangling)')
    print('images        Lists all Docker images on local system')
    print('up            Starts containers for docker-compose.yml in current directory')
    print('down          Shuts down and removes containers')
    print('bash <name>   Enters container <name> and opens bash shell (if available)')
    print('ps            Lists containers in docker-compose.yml')
    print('build         Builds all images for docker-compose.yml in current directory')
    print('help          Shows this help')


# --------------------------------------------------------------------------------------------------------------------
def run(args):
    if len(args) == 1:
        show_help()
    elif args[1] == 'clean':
        clean()
    elif args[1] == 'clean-volumes':
        clean_volumes()
    elif args[1] == 'images':
        images()
    elif args[1] == 'up':
        up()
    elif args[1] == 'down':
        down()
    elif args[1] == 'bash':
        if len(args) == 3:
            bash(args[2])
    else:
        subprocess.call(['docker-compose', args[1]])

if __name__ == '__main__':
    run(sys.argv)
