20150904_105808 [INFO] Running kernel linear
20150904_105810 [INFO]   score (linear): 0.705882352941
20150904_105812 [INFO]   score (linear): 0.764705882353
20150904_105815 [INFO]   score (linear): 0.529411764706
20150904_105817 [INFO]   score (linear): 0.705882352941
20150904_105819 [INFO]   score (linear): 0.735294117647
20150904_105822 [INFO]   score (linear): 0.676470588235
20150904_105824 [INFO]   score (linear): 0.75
20150904_105826 [INFO]   score (linear): 0.71875
20150904_105828 [INFO]   score (linear): 0.75
20150904_105831 [INFO]   score (linear): 0.6875
20150904_105831 [INFO] Running kernel rbf
20150904_105833 [INFO]   score (rbf): 0.794117647059
20150904_105835 [INFO]   score (rbf): 0.764705882353
20150904_105837 [INFO]   score (rbf): 0.529411764706
20150904_105839 [INFO]   score (rbf): 0.764705882353
20150904_105841 [INFO]   score (rbf): 0.764705882353
20150904_105843 [INFO]   score (rbf): 0.735294117647
20150904_105845 [INFO]   score (rbf): 0.71875
20150904_105847 [INFO]   score (rbf): 0.78125
20150904_105850 [INFO]   score (rbf): 0.625
20150904_105852 [INFO]   score (rbf): 0.75
20150904_105852 [INFO] Running kernel matern32
20150904_105854 [INFO]   score (matern32): 0.764705882353
20150904_105856 [INFO]   score (matern32): 0.735294117647
20150904_105858 [INFO]   score (matern32): 0.558823529412
20150904_105900 [INFO]   score (matern32): 0.764705882353
20150904_105903 [INFO]   score (matern32): 0.735294117647
20150904_105905 [INFO]   score (matern32): 0.735294117647
20150904_105907 [INFO]   score (matern32): 0.78125
20150904_105909 [INFO]   score (matern32): 0.78125
20150904_105912 [INFO]   score (matern32): 0.625
20150904_105914 [INFO]   score (matern32): 0.75
20150904_105914 [INFO] Running kernel exponential
20150904_105916 [INFO]   score (exponential): 0.764705882353
20150904_105918 [INFO]   score (exponential): 0.735294117647
20150904_105920 [INFO]   score (exponential): 0.647058823529
20150904_105922 [INFO]   score (exponential): 0.764705882353
20150904_105924 [INFO]   score (exponential): 0.764705882353
20150904_105926 [INFO]   score (exponential): 0.735294117647
20150904_105928 [INFO]   score (exponential): 0.75
20150904_105930 [INFO]   score (exponential): 0.75
20150904_105932 [INFO]   score (exponential): 0.625
20150904_105934 [INFO]   score (exponential): 0.71875
20150904_105934 [INFO] overall score (rbf): 0.722794117647
20150904_105934 [INFO] overall score (matern32): 0.723161764706
20150904_105934 [INFO] overall score (linear): 0.702389705882
20150904_105934 [INFO] overall score (exponential): 0.725551470588
20150904_105934 [INFO] 
20150904_105934 [INFO] 
# ----------------------------------------------------------------------------------------------------------------------
# This script runs a Gaussian Process classifier on the FreeSurfer features.
# ----------------------------------------------------------------------------------------------------------------------
__author__ = 'Ralph Brecheisen'

import os
import sys

sys.path.insert(1, os.path.abspath('../..'))

from scripts import util
from scripts import const
from scripts import logging
from scripts import prepare

import GPy
import numpy as np

from sklearn.cross_validation import StratifiedKFold

from matplotlib import pyplot as plt

LOG = logging.Logger()


# ----------------------------------------------------------------------------------------------------------------------
def find_params(features):

    X, y = util.get_xy(
        features,
        target_column='diagnosis',
        exclude_columns=['age', 'gender', 'diagnosis'])
    Y = np.array([y]).T
    n = X.shape[1]

    if not os.path.isdir('fig'):
        os.mkdir('fig')

    for k in kernels:
        for length_scale in np.linspace(1.0, 10.0, num=10):
            kernel = kernels[k]
            kernel.lengthscale = length_scale
            classifier = GPy.models.GPClassification(X, Y, kernel)
            plt.matshow(classifier.kern.K(classifier.X))
            plt.savefig('fig/fig_{}_{}.png'.format(k, str(length_scale)))
            plt.close()


# ----------------------------------------------------------------------------------------------------------------------
def build_kernel(name, input_dim):

    if name == 'linear':
        return GPy.kern.Linear(input_dim)
    if name == 'rbf':
        return GPy.kern.RBF(input_dim, lengthscale=5.)
    if name == 'matern32':
        return GPy.kern.Matern32(input_dim, lengthscale=4.)
    if name == 'exponential':
        return GPy.kern.Exponential(input_dim, lengthscale=2.)
    return None

# ----------------------------------------------------------------------------------------------------------------------
def run_gp(features, n_iters=10):

    X, y = util.get_xy(
        features,
        target_column='diagnosis',
        exclude_columns=['age', 'gender', 'diagnosis'])

    kernels = ['linear', 'rbf', 'matern32', 'exponential']
    scores = {}

    for k in kernels:

        LOG.info('Running kernel {}'.format(k))
        scores[k] = []

        for i in range(n_iters):

            for train, test in StratifiedKFold(y, n_folds=10):

                X_train = X[train]
                Y_train = np.array([y[train]]).T
                kernel = build_kernel(k, X_train.shape[1])
                classifier = GPy.models.GPClassification(X_train, Y_train, kernel)
                for _ in range(5):
                    classifier.optimize()

                X_test = X[test]
                Y_test = np.array([y[test]]).T
                probs = classifier.predict(X_test)[0]
                error_rate, _, _, _, _ = GPy.util.classification.conf_matrix(probs, Y_test, show=False)
                scores[k].append(1.0 - error_rate)
                LOG.info('  score ({}): {}'.format(k, scores[k][-1]))

    return scores


# ----------------------------------------------------------------------------------------------------------------------
def run():

    # Load FreeSurfer features
    features = util.load_features(const.FREESURFER_FILE)
    # Perform age-matching between healthy and schizophrenia patients
    features = prepare.match_ages(features, 'HC', 'SZ', 2, nr_labels=2)
    # Remove constant features
    features = prepare.remove_constant_features(features)
    # Normalize numerical features across subjects (excluding 'age')
    features = prepare.normalize_across_subjects(features, exclude=['age'])
    # Subtract age and gender confounds
    features = prepare.residualize(features, ['age', 'gender', 'EstimatedTotalIntraCranialVol'])
    # Replace HC and SZ labels with -1 and 1
    features['diagnosis'].replace(['HC', 'SZ'], [1, 0], inplace=True)

    scores = run_gp(features, 1)
    for k in scores.keys():
        LOG.info('overall score ({}): {}'.format(k, np.mean(scores[k])))

    # Close log
    LOG.append_file(__file__)
    LOG.close()


# ----------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':

    run()
